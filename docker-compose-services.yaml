version: '3.8'

services:
  rabbitmq:
    container_name: fromedwin_rabbitmq
    image: rabbitmq:3-management
    privileged: true
    networks:
      - monitoring
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER-}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS-}
      prometheus.return_per_object_metrics: "true"  # Enable per-object metrics
    ports:
      - "5672:5672"   # RabbitMQ
      - "15672:15672" # RabbitMQ Management UI
      - "15692:15692" # Prometheus metrics endpoint (default for rabbitmq_prometheus)
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq  # Optional: persistent data storage
    command: >
      sh -c "rabbitmq-plugins enable rabbitmq_prometheus &&
             rabbitmq-plugins enable rabbitmq_management &&
             rabbitmq-server"
  influxdb:
    image: influxdb:2.7
    container_name: fromedwin_influxdb
    networks:
      - monitoring
    ports:
      - "8086:8086"  # Map InfluxDB port to host
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_DEFAULT_USER-}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_DEFAULT_PASS-}
      - DOCKER_INFLUXDB_INIT_ORG=fromedwin
      - DOCKER_INFLUXDB_INIT_BUCKET=fromedwin
      - DOCKER_INFLUXDB_INIT_RETENTION=1w  # 1 week retention policy
    volumes:
      - ./data/influxdb:/var/lib/influxdb2
  telegraf:
    image: telegraf:latest
    container_name: fromedwin_telegraf
    networks:
      - monitoring
    environment:
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_BUCKET=fromedwin
      - INFLUXDB_ORG=fromedwin
    ports:
      - "9273:9273"  # Expose Telegraf Prometheus plugin metrics
    volumes:
      - ./services/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
  fromedwin_scheduler:
    container_name: fromedwin_scheduler
    build: 
      context: .
      dockerfile: ./Dockerfile
    environment:
      DATABASE_URL: ${DATABASE_URL-}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL-amqp://admin:admin@host.docker.internal}
    volumes:
      - .:/app
    ports:
      - "8010:8000"
    entrypoint: ["/app/scheduler/entrypoint.sh"]

networks:
  monitoring:
    driver: bridge