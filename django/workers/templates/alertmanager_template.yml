global:
  # The smarthost and SMTP sender used for mail notifications.
  smtp_smarthost: 'localhost:25'
  smtp_from: 'alertmanager@example.org'
  smtp_auth_username: 'alertmanager'
  smtp_auth_password: 'password'
  pagerduty_url: 'https://events.eu.pagerduty.com/v2/enqueue'

# The directory from which notification templates are read.
templates: 
- '/etc/alertmanager/template/*.tmpl'

# The root route on which each incoming alert enters.
route:
  # The labels by which incoming alerts are grouped together. For example,
  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
  # be batched into a single group.
  #
  # To aggregate by all possible labels use '...' as the sole label name.
  # This effectively disables aggregation entirely, passing through all
  # alerts as-is. This is unlikely to be what you want, unless you have
  # a very low alert volume or your upstream notification system performs
  # its own grouping. Example: group_by: [...]
  group_by: ['alertname', 'cluster', 'service']

  # When a new group of alerts is created by an incoming alert, wait at
  # least 'group_wait' to send the initial notification.
  # This way ensures that you get multiple alerts for the same group that start
  # firing shortly after another are batched together on the first 
  # notification.
  group_wait: 10s

  # When the first notification was sent, wait 'group_interval' to send a batch
  # of new alerts that started firing for that group.
  group_interval: 30s

  # If an alert has successfully been sent, wait 'repeat_interval' to
  # resend them.
  repeat_interval: 3h 

  # A default receiver
  receiver: webhook-only

  routes:
  {% for pager in pager_duty %}
  - match:
      application: {{ pager.project.id }}
      severity: critical
    receiver: 'project-{{ pager.project.id }}-{{ pager.id }}'
  {% endfor %}

# Inhibition rules allow to mute a set of alerts given that another alert is
# firing, mute any warning-level notifications if the same alert is 
# already critical.
inhibit_rules:
- source_match:
    severity: 'critical'
  target_match:
    severity: 'warning'
  equal: ['alertname', 'cluster', 'service']

##
# RECEIVERS
##
receivers:
{% for pager in pager_duty %}
- name: 'project-{{ pager.project.id }}-{{ pager.id }}'
  webhook_configs:
  - send_resolved: True
    url: {{ settings.ALERTMANAGER_WEBHOOK_URL }}
  pagerduty_configs:
  - routing_key: '{{ pager.routing_key }}'
{% endfor %}

- name: 'webhook-only'
  webhook_configs:
  - send_resolved: True
    url: {{ settings.ALERTMANAGER_WEBHOOK_URL }}
